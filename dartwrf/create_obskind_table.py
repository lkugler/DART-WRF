"""
To be able to generate obs_seq.in files, we need a dictionary to convert obs kinds to numbers

  a) we read the obs kind definitions (obs_kind_mod.f90 from DART code) 
  b) we generate a python file with this dictionary

# Note: to include it in the documentary, the file needs to exist also in the repository 
# (so the documentation generator SPHINX can read it)
"""
import os, sys
import shutil


def _dict_to_py(d, outfile):
    """Write a python dictionary to a .py file

    Args:
        d (dict): dictionary to write
        outfile (str): path to output file

    Returns:
        None
    """
    with open(outfile, 'w') as f:
        txt = '""" NOTE: This file is autogenerated! \nUse dartwrf/create_obskind_table.py to regenerate!\n"""\nobs_kind_nrs = {\n'
        for k, v in d.items():
            txt += '"'+k+'": '+str(v)+', \n'
        txt += '}'
        f.write(txt)


def _obskind_read(dart_srcdir):
    """Read dictionary of observation types + ID numbers ("kind") 
    from DART f90 script and return it as python dictionary
    """
    definitionfile = dart_srcdir + \
        '/../../../assimilation_code/modules/observations/obs_kind_mod.f90'
    with open(definitionfile, 'r') as f:
        kind_def_f = f.readlines()

    obskind_nrs = {}
    for i, line in enumerate(kind_def_f):
        if 'Integer definitions for DART OBS TYPES' in line:
            # data starts below this line
            i_start = i
            break
    for line in kind_def_f[i_start+1:]:
        if 'MAX_DEFINED_TYPES_OF_OBS' in line:
            # end of data
            break
        if '::' in line:
            # a line looks like this
            # integer, parameter, public ::       MSG_4_SEVIRI_TB =   261
            data = line.split('::')[-1].split('=')
            kind_str = data[0].strip()
            kind_nr = int(data[1].strip())
            obskind_nrs[kind_str] = kind_nr
    return obskind_nrs


def _save_config_to_scriptsdir(server_config, original_scripts_dir):
    try:
        dir_path = os.path.dirname(os.path.realpath(__file__))
        shutil.copyfile(dir_path+'/../config/'+server_config,
                        original_scripts_dir+'/server_config.py')
    except shutil.SameFileError:
        pass


def run(server_config='jet.py'):
    """Create obskind.py from obs_kind_mod.f90
    """

    # usually /home/DART-WRF/dartwrf/
    original_scripts_dir = '/'.join(__file__.split('/')[:-1])

    # copy the original config to "scripts_dir"
    _save_config_to_scriptsdir(server_config, original_scripts_dir)

    # import the config from scripts_dir
    sys.path.append(original_scripts_dir)
    from server_config import cluster

    dart_srcdir = cluster.dart_srcdir

    obskind_dictionary = _obskind_read(dart_srcdir)

    _dict_to_py(obskind_dictionary, original_scripts_dir+'/obs/obskind.py')
    print('>>>', original_scripts_dir+'/obs/obskind.py', 'created')


if __name__ == '__main__':
    run(server_config='jet_ACF.py')
